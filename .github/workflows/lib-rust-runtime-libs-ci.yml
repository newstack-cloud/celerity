# This is the CI workflow for the Rust runtime libraries.
name: Runtime Libraries CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ main ]
    paths: 
      - 'libs/runtime/**'
  pull_request:
    branches: [ main ]
    paths: 
      - 'libs/runtime/**'
  workflow_dispatch:
    inputs: {}

jobs:
  integrate:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      working-directory: ./libs/runtime
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        run: rustup update stable
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Use Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip' # caching pip dependencies
      # Python dependencies are required to run test service_test_tools.py script
      # that runs the integration tests.
      - run: pip install -r requirements.txt
        working-directory: ${{env.working-directory}}
      - name: Linting
        run: ./scripts/lint.sh
        working-directory: ${{env.working-directory}}
      - name: Run tests
        run: |
          set -o allexport
          source .env.test
          set +o allexport
          python scripts/package-test-tools.py --localdeps
        working-directory: ${{env.working-directory}}
      - name: Upload coverage to Codecov for `runtime-lib-blueprint-config-parser`
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: codecov.json
          fail_ci_if_error: true
          flags: runtime-lib-blueprint-config-parser
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@master
        with:
          projectBaseDir: ${{ env.working-directory }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
