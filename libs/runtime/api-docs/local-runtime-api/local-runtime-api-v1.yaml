openapi: 3.1.0
info:
  title: Local Runtime API
  description: |-
    This is the HTTP API that allows a handlers executable to retrieve incoming requests/messages from and send responses to the runtime when running in `http` mode for handlers written in ahead-of-time compiled languages.

    This API is designed for inter-process communication within an isolated environment such as a container or VM that must **not** be exposed to the outside world.
  version: 1.0.0
tags:
  - name: events
    description: Endpoints for retrieving and processing requests and messages received by the runtime.
  - name: websockets
    description: Endpoints for sending messages to specific WebSocket connections.
  - name: runtime
    description: Runtime-specific endpoints for tasks like retrieving configuration for the current application.

paths:
  /events/next:
    post:
      tags:
        - events
      summary: Retrieves the next event received by the runtime.
      description: |
        Retrieves the next available request or message received by the runtime.
        Depending on the kind of application that the runtime is hosting,
        an event could be a HTTP request, WebSocket message or a message from a cloud queue service or message broker.
        If an event source is a cloud queue service or message broker, an event will contain a batch of messages.

        Retrieving the next event will consume it from the runtime queue and move it into a "processing" status immediately,
        on receiving a result for the event it will be removed completely.

        If a deadline is exceeded while waiting for a result,
        a timeout error will be returned to the caller of the runtime in the appropriate form and the event will be removed.
        Retry behaviour is expected to be implemented by the client (for example, a Cloud Queue Service redrive strategy or a HTTP client with a retry/exponential backoff strategy)

      operationId: takeNextEvent
      responses:
        "200":
          description: |
            The next available event in the queue received by the runtime.
            This will return `null` if there are currently no events to process.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "500":
          description: |
            A server error occurred when trying to retrieve next event.
          content:
            applicatoin/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /events/result:
    post:
      tags:
        - events
      summary: Send a result of processing an event.
      description: |
        Send a result of processing an event.
        This should be used to return HTTP responses and a response indicating whether or not a batch of messages from a queue or message broker were processed successfully.

        Upon receiving a result, the event will be removed from the runtime's in-memory queue.

        This can also be used to indicate the end of processing a WebSocket message, however, no messages will be sent to the caller.
        The `POST /websockets/messages` endpoint should be used to send messages to specific connections.
      operationId: postResult
      requestBody:
        $ref: "#/requestBodies/EventResultBody"
      responses:
        "200":
          description: |
            The event result has been successfully processed,
            meaning a response has been sent for a http request event or a set of messages have been deleted from a source queue for a successful result.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResultResponse"
        "404":
          description: |
            The event with the provided ID was not found in the runtime.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventNotFoundErrorResponse"
        "500":
          description: |
            A server error occurred when trying to process the event result.
          content:
            applicatoin/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

  /websockets/messages:
    post:
      tags:
        - websockets
      summary: Send messages to a WebSocket connection.
      description: |
        Sends a batch of messages, each message to a specified websocket connection ID.

        This exists to match the serverless experience around WebSockets provided by the likes of Amazon API Gateway v2 allowing Celerity WebSocket applications to be implemented one way regardless of the deployment target.

        To send messages back to the client that established the current connection, this should be called with the `connectionId` in the event currently being handled.

        A batch of up to 100 messages can be sent at a time.
      operationId: postWebSocketMessages
      requestBody:
        $ref: "#/requestBodies/PostWebSocketMessagesBody"
      responses:
        "200":
          description: |
            The messages have been sent.

            If the target connection is in the current runtime instance, the message will have been sent directly to the client on the other side of the connection.

            If the target connection is not on the current runtime instance,
            it will have been broadcast to all nodes in a cluster where the node that has the connection will send the message to the client on the other side of the connection.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostWebSocketMessagesResponse"
        "403":
          description: |
            The WebSockets feature is not enabled for the current application. This will be returned when the blueprint configuration for the current application does not specify support for the `websocket` protocol.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostWebSocketMessagesNotEnabledResponse"
        "500":
          description: |
            A server error occurred when trying to send websocket messages.
          content:
            applicatoin/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"
  /runtime/config:
    get:
      tags:
        - runtime
      summary: Retrieves runtime configuration including the handler definitions for the current application.
      description: |
        Retrieves runtime configuration for the current application.
        The primary use case for this endpoint is to allow the handlers executable to retrieve during initialisation.
        The config contains the handler definitions including the `handlerTag` that can be used to wire up handlers to be trigerred on a matching handlerTag for events retrieved from the runtime queue.
      responses:
        "200":
          description: |
            The runtime configuration for the current application.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RuntimeConfigurationResponse"
        "500":
          description: |
            A server error occurred when trying to retrieve runtime configuration.
          content:
            applicatoin/json:
              schema:
                $ref: "#/components/schemas/ServerErrorResponse"

requestBodies:
  EventResultBody:
    content:
      application/json:
        schema:
          type: object
          required: ["eventId", "data"]
          properties:
            eventId:
              type: string
              format: uuid
              description: |
                The unique identifier of the event that the result is for.
            data:
              oneOf:
                - $ref: "#/components/schemas/HttpRequestEventResultPayload"
                - $ref: "#/components/schemas/MessageProcessingEventResultPayload"
                - $ref: "#/components/schemas/WebSocketMessageEventResultPayload"
                - $ref: "#/components/schemas/ScheduleEventResultPayload"
                - $ref: "#/components/schemas/EventTriggerResultPayload"
            context:
              type: object
              description: |
                Extra context that can provide additional information to the runtime in determining how to proceed with the result.
              additionalProperties: true

  PostWebSocketMessagesBody:
    content:
      application/json:
        schema:
          type: object
          required: ["messages"]
          properties:
            messages:
              type: array
              description: An array of up to 100 messages.
              items:
                $ref: "#/components/schemas/WebSocketMessage"

components:
  schemas:
    RuntimeConfigurationResponse:
      type: object
      required: ["appConfig"]
      properties:
        appConfig:
          $ref: "#/components/schemas/ApplicationConfiguration"

    ApplicationConfiguration:
      type: object
      required:
        - tracingEnabled
      properties:
        tracingEnabled:
          type: boolean
          description: Whether or not tracing is enabled at the application level.
        http:
          $ref: "#/components/schemas/HttpConfiguration"
        websocket:
          $ref: "#/components/schemas/WebSocketConfiguration"
        consumer:
          $ref: "#/components/schemas/ConsumerConfiguration"
        schedule:
          $ref: "#/components/schemas/ScheduleConfiguration"
        events:
          $ref: "#/components/schemas/EventsConfiguration"

    HttpConfiguration:
      type: object
      required:
        - handlers
      properties:
        handlers:
          type: array
          items:
            $ref: "#/components/schemas/HttpHandlerConfiguration"

    HttpHandlerConfiguration:
      type: object
      required:
        - handlerName
        - handlerTag
        - path
        - method
        - timeout
        - tracingEnabled
      properties:
        handlerName:
          type: string
          description: The unique name of the handler in this application.
          examples: ["Orders-GetOrder-v1"]
        handlerTag:
          type: string
          description: |
            The unique tag assigned to the handler derived from trigger/route configuration.
          examples: ["get::/orders/{orderId}"]
        path:
          type: string
          examples: ["/orders/{orderId}"]
        method:
          type: string
          enum:
            - "get"
            - "post"
            - "put"
            - "patch"
            - "delete"
            - "trace"
            - "options"
          examples: ["get"]
        timeout:
          type: integer
          description: The maximum time in seconds that the handler is allowed to process the request.
        tracingEnabled:
          type: boolean
          description: Whether or not tracing is enabled for the handler.

    WebSocketConfiguration:
      type: object
      required:
        - handlers
      properties:
        handlers:
          type: array
          items:
            $ref: "#/components/schemas/WebSocketHandlerConfiguration"

    WebSocketHandlerConfiguration:
      type: object
      required:
        - handlerName
        - handlerTag
        - routeKey
        - timeout
        - tracingEnabled
      properties:
        handlerName:
          type: string
          description: The unique name of the handler in this application.
          examples: ["Orders-GetOrder-v1"]
        handlerTag:
          type: string
          description: |
            The unique tag assigned to the handler derived from trigger/route configuration.
          examples: ["action::myAction"]
        routeKey:
          type: string
          examples: ["action"]
        route:
          type: string
          examples: ["myAction"]
        timeout:
          type: integer
          description: The maximum time in seconds that the handler is allowed to process the message.
        tracingEnabled:
          type: boolean
          description: Whether or not tracing is enabled for the handler.

    ConsumerConfiguration:
      type: object
      required:
        - handlers
      properties:
        handlers:
          type: array
          items:
            $ref: "#/components/schemas/ConsumerHandlerConfiguration"

    ConsumerHandlerConfiguration:
      type: object
      required:
        - handlerName
        - handlerTag
        - routeKey
        - timeout
        - tracingEnabled
      properties:
        handlerName:
          type: string
          description: The unique name of the handler in this application.
          examples: ["Orders-GetOrder-v1"]
        handlerTag:
          type: string
          description: |
            The unique tag assigned to the handler derived from the source queue or message broker.
          examples: ["source::arn:aws:sqs:us-east-2:444455556666:queue1"]
        sourceId:
          type: string
          examples: ["arn:aws:sqs:us-east-2:444455556666:queue1"]
        timeout:
          type: integer
          description: The maximum time in seconds that the handler is allowed to process the message.
        tracingEnabled:
          type: boolean
          description: Whether or not tracing is enabled for the handler.

    ScheduleConfiguration:
      type: object
      required:
        - handlers
      properties:
        handlers:
          type: array
          items:
            $ref: "#/components/schemas/ScheduleHandlerConfiguration"

    ScheduleHandlerConfiguration:
      type: object
      required:
        - handlerName
        - handlerTag
        - schedule
        - timeout
        - tracingEnabled
      properties:
        handlerName:
          type: string
          description: The unique name of the handler in this application.
          examples: ["Orders-Summarise-v1"]
        handlerTag:
          type: string
          description: |
            The unique tag assigned to the handler derived from the queue that scheduled cloud events are forwarded to and the handler name.
          examples:
            [
              "source::arn:aws:sqs:us-east-2:444455556666:schedule-events-queue::Orders-Summarise-v1",
            ]
        schedule:
          type: string
          examples: ["rate(1h)"]
        timeout:
          type: integer
          description: The maximum time in seconds that the handler is allowed to process the message.
        tracingEnabled:
          type: boolean
          description: Whether or not tracing is enabled for the handler.

    EventsConfiguration:
      type: object
      required:
        - handlers
      properties:
        handlers:
          type: array
          items:
            $ref: "#/components/schemas/EventHandlerConfiguration"

    EventHandlerConfiguration:
      type: object
      required:
        - handlerName
        - handlerTag
        - timeout
        - tracingEnabled
      properties:
        handlerName:
          type: string
          description: The unique name of the handler in this application.
          examples: ["Orders-Invoice-Upload-v1"]
        handlerTag:
          type: string
          description: |
            The unique tag assigned to the handler derived from the queue that configured cloud service (or other) events are forwarded to and the handler name.

            This could also be a data stream source ID that is directly consumed by the runtime.
          examples:
            [
              "source::arn:aws:sqs:us-east-2:444455556666:cloud-events-queue::objectCreated",
            ]
        event:
          type: string
          description: The event type that the handler responds to, this is only present when a queue is the point of interaction for the runtime.
          examples: ["objectCreated"]
        timeout:
          type: integer
          description: The maximum time in seconds that the handler is allowed to process the message.
        tracingEnabled:
          type: boolean
          description: Whether or not tracing is enabled for the handler.

    WebSocketMessage:
      type: object
      required: ["connectionId", "messageId", "message"]
      properties:
        connectionId:
          type: string
          examples: ["60dc70c6-9816-450d-957f-1fdae3a25403"]
        messageId:
          type: string
          description: A unique identifier for the message.
        informClientsOnLoss:
          type: array
          description: |
            A list of clients (connection IDs) that should be informed if message delivery couldn't be guaranteed.
            These clients will only receive messages about potentially
            lost messages if they are connected to the same node.
        message:
          type: string

    HttpRequestEventResultPayload:
      type: object
      required:
        - status
        - headers
      properties:
        status:
          type: integer
          examples: [200]
        headers:
          type: object
          additionalProperties:
            type: string
          examples:
            - content-type: application/json
        body:
          type: string
          description: |
            The body of the response, can be a string or `null`.
          examples: ['{"id":24}']

    WebSocketMessageEventResultPayload:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          description: Whether or not the message was successfully processed.
        errorMessage:
          type: string
          nullable: true
          description: A message containing the reason processing the message failed.

    ScheduleEventResultPayload:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          description: Whether or not the scheduled event handler was successful.
        errorMessage:
          type: string
          nullable: true
          description: A message containing the reason why the scheduled handler failed.

    EventTriggerResultPayload:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          description: Whether or not the event handler was successful in processing an event (cloud or otherwise).
        errorMessage:
          type: string
          nullable: true
          description: A message containing the reason why the event handler failed.

    MessageProcessingEventResultPayload:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          description: Whether or not processing an event representing a batch of messages was successful. This should only be true when all messages were processed successfully.
        failures:
          type: array
          items:
            $ref: "#/components/schemas/MessageProcessingFailure"
          description: |
            An optional array of failed message IDs allong with error messages.
            For consumers that support partial failure reporting,
            this will make sure that message IDs in this list
            are not deleted/consumed.
            When not reporting partial failures and processing has failed, this should be provided with a single entry with the message ID `all`.

            This would look something like:
            ```json
            [{ messageId: "all", errorMessage: "Failed processing message 1" }]
            ```

    MessageProcessingFailure:
      type: object
      required:
        - messageId
      properties:
        messageId:
          type: string
        errorMessage:
          type: string

    Event:
      type: object
      required: ["id", "event", "handlerTag", "timestamp", "data"]
      properties:
        id:
          type: string
          format: uuid
          description: |
            The unique identifier of the event assigned by the runtime.
        eventType:
          type: string
          description: |
            The type of event.
            Can be one of `httpRequest`, `wsMessage`, `consumerMessage`, `scheduleMessage` or `eventMessage`.
          enum:
            - httpRequest
            - wsMessage
            - consumerMessage
            - scheduleMessage
            - eventMessage
          examples: ["httpRequest"]
        handlerTag:
          type: string
          description: |
            A unique tag for the handler that should process this request/message. This is determined at startup where the runtime assigns and returns tags for specific handlers during handler initialisation. This allows the handler executable to do a simple lookup by string instead of using the event data to figure out which handler should be called.
          examples: ["get::/orders/{orderId}"]
        timestamp:
          type: number
          description: The unix timestamp in seconds for when the event was received.
          examples: [1715045992]
        data:
          type: object
          description: An object containing the event data.
          oneOf:
            - $ref: "#/components/schemas/HttpRequestEventData"
            - $ref: "#/components/schemas/WebSocketMessageEventData"
            - $ref: "#/components/schemas/QueueConsumerMessagesEventData"
            - $ref: "#/components/schemas/ScheduleEventData"
            - $ref: "#/components/schemas/OtherEventData"
        context:
          type: object
          description: |
            Shared context for the current environment.
            This may contain results/user profile information
            from authentication and authorization amongst other useful information.
          additionalProperties: true

    EventResultResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          examples: ["The result has been successfully processed"]

    PostWebSocketMessagesResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          examples: ["The messages have been sent"]

    HttpRequestEventData:
      type: object
      required:
        - method
        - path
        - route
        - pathParams
        - queryParams
        - headers
        - sourceIp
        - requestId
      properties:
        method:
          type: string
          enum:
            - "get"
            - "post"
            - "put"
            - "patch"
            - "delete"
            - "trace"
            - "options"
          examples: ["get"]
        path:
          type: string
          examples: ["/orders/24"]
        route:
          type: string
          examples: ["/orders/{orderId}"]
        pathParams:
          type: object
          additionalProperties:
            type: string
          examples:
            - orderId: "24"
        queryParams:
          type: object
          additionalProperties:
            type: string
          examples:
            - viewMode: full
        multiQueryParams:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        headers:
          type: object
          additionalProperties:
            type: string
          examples:
            - content-type: application/json
        multiHeaders:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        body:
          type: string
          examples:
            - '{"id":24}'
        sourceIp:
          type: string
          examples: ["192.168.72.0"]
        requestId:
          type: string
          examples: ["e9c9d01c-64a0-4127-8c5c-9745a4d05840"]

    WebSocketMessageEventData:
      type: object
      required:
        - route
        - connectionId
        - message
        - sourceIp
        - requestId
      properties:
        route:
          type: string
          examples: ["action:myAction"]
        connectionId:
          type: string
          examples: ["6b18a67e-4de3-441e-a723-bcdac1a01fdb"]
        sourceIp:
          type: string
          examples: ["192.168.72.0"]
        requestId:
          type: string
          examples: ["e9c9d01c-64a0-4127-8c5c-9745a4d05840"]
        message:
          type: string
          description: |
            A serialised JSON object that is expected
            to contain the property used for the routeKey
            to route the message to the correct handler.
          examples:
            - '{"action":"myAction","text":"A new message for myAction"}'

    QueueConsumerMessagesEventData:
      type: object
      required:
        - messages
        - vendor
      properties:
        messages:
          $ref: "#/components/schemas/QueueConsumerMessage"
        vendor:
          type: object
          description: Vendor-specific information associated with the batch of messages.
          additionalProperties: true

    QueueConsumerMessage:
      type: object
      required:
        - messageId
        - body
        - source
        - messageAttributes
        - vendor
      properties:
        messageId:
          type: string
          examples: ["e9c9d01c-64a0-4127-8c5c-9745a4d05840"]
        body:
          type: string
          description: The message body.
        source:
          type: string
          description: The unique identifier of the message source.
          examples:
            - "arn:aws:sqs:us-east-2:444455556666:queue1"
        messageAttributes:
          type: object
          description: |
            A collection of attributes associated with the message that should be treated as metadata for the message.
            An example use-case would be to propogate trace information from the context that sent the message to the queue or message broker.
          additionalProperties: true
        vendor:
          type: object
          description: Vendor-specific information associated with the message.
          additionalProperties: true

    ScheduleEventData:
      type: object
      required:
        - scheduleId
        - messageId
        - schedule
        - vendor
      properties:
        scheduleId:
          type: string
          description: |
            The unique identifier of the scheduled event trigger.
        messageId:
          type: string
          description: The queue message that the scheduled event trigger created to trigger the handler in the runtime.
          examples: ["e9c9d01c-64a0-4127-8c5c-9745a4d05840"]
        schedule:
          type: string
          examples: ["rate(1h)"]
        vendor:
          type: object
          description: Vendor-specific information associated with the event trigger message.
          additionalProperties: true

    OtherEventData:
      type: object
      required:
        - body
        - source
        - vendor
      properties:
        body:
          type: string
          description: The message or stream event body.
        source:
          type: string
          description: The unique identifier of the message or stream source.
          examples:
            - "arn:aws:sqs:us-east-2:444455556666:queue1"
        messageId:
          type: string
          description: The queue message that the event trigger created to trigger the handler in the runtime.
          examples: ["e9c9d01c-64a0-4127-8c5c-9745a4d05840"]
        messageAttributes:
          type: object
          description: |
            A collection of attributes associated with the message that should be treated as metadata for the message.
            An example use-case would be to propogate trace information from the context that sent the message to the queue or message broker.
          additionalProperties: true
        vendor:
          type: object
          description: Vendor-specific information associated with the message/stream record.
          additionalProperties: true

    ServerErrorResponse:
      type: object
      properties:
        message:
          type: string
          examples: ["An unexpected error occurred"]

    PostWebSocketMessagesNotEnabledResponse:
      type: object
      properties:
        message:
          type: string
          examples: ["WebSockets are not enabled for the current application"]

    EventNotFoundErrorResponse:
      type: object
      properties:
        message:
          type: string
          examples: ["Event with provided ID was not found"]
