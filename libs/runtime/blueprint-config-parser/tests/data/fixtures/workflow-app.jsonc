{
  "version": "2025-05-12",
  "transform": "celerity-2026-02-28",
  "resources": {
    "docProcessingWorkflow": {
      "type": "celerity/workflow",
      "linkSelector": {
        "byLabel": {
          "application": "docProcessor"
        }
      },
      "spec": {
        "startAt": "fetchDocument",
        "states": {
          "fetchDocument": {
            "type": "executeStep",
            "description": "Fetch the document provided in the input data.",
            "inputPath": "$.document",
            "payloadTemplate": {
              "url": "$.url"
            },
            "resultPath": "$.downloaded",
            "retry": [
              {
                // A comment to test stripping of comments.
                "matchErrors": ["Timeout"],
                "interval": 5,
                "maxAttempts": 3,
                "jitter": true,
                "backoffRate": 1.5
              }
            ],
            "catch": [
              {
                "matchErrors": ["*"],
                "next": "handleError",
                "resultPath": "$.errorInfo"
              }
            ],
            "next": "scanDocument"
          },
          "scanDocument": {
            "type": "executeStep",
            "description": "Scans the document for any malicious content.",
            "resultPath": "$.scanResult",
            "retry": [
              {
                "matchErrors": ["Timeout"],
                "interval": 5,
                "maxAttempts": 3,
                "jitter": true,
                "backoffRate": 1.5
              }
            ],
            "catch": [
              {
                "matchErrors": ["*"],
                "next": "handleError",
                "resultPath": "$.errorInfo"
              }
            ],
            "next": "scanResultDecision"
          },
          "scanResultDecision": {
            "type": "decision",
            "description": "Decide the next state based on the scan result.",
            "decisions": [
              {
                "condition": {
                  "function": "eq",
                  "inputs": ["$.scanResult", "Clean"]
                },
                "next": "documentProcessingDecision"
              },
              {
                "condition": {
                  "function": "eq",
                  "inputs": ["$.scanResult", "Malicious"]
                },
                "next": "maliciousContentFound"
              }
            ]
          },
          "documentProcessingDecision": {
            "type": "decision",
            "description": "Decide which document processing step to execute based on the document type.",
            "inputPath": "$.downloaded",
            "decisions": [
              {
                "condition": {
                  "function": "string_match",
                  "inputs": ["$.path", "*.pdf"]
                },
                "next": "processPDF"
              },
              {
                "condition": {
                  "function": "string_match",
                  "inputs": ["$.path", "*.docx"]
                },
                "next": "processDOCX"
              }
            ]
          },
          "processPDF": {
            "type": "executeStep",
            "description": "Process the PDF document to extract text and metadata.",
            "inputPath": "$.downloaded",
            "payloadTemplate": {
              "filePath": "$.path"
            },
            "resultPath": "$.extractedDataFile",
            "retry": [
              {
                "matchErrors": ["Timeout"],
                "interval": 5,
                "maxAttempts": 3,
                "jitter": true,
                "backoffRate": 1.5
              }
            ],
            "catch": [
              {
                "matchErrors": ["*"],
                "next": "handleError",
                "resultPath": "$.errorInfo"
              }
            ],
            "next": "waitForProcessing"
          },
          "processDOCX": {
            "type": "executeStep",
            "description": "Process the word document to extract text and metadata.",
            "inputPath": "$.downloaded",
            "payloadTemplate": {
              "filePath": "$.path"
            },
            "resultPath": "$.extractedDataFile",
            "retry": [
              {
                "matchErrors": ["Timeout"],
                "interval": 5,
                "maxAttempts": 3,
                "jitter": true,
                "backoffRate": 1.5
              }
            ],
            "catch": [
              {
                "matchErrors": ["*"],
                "next": "handleError",
                "resultPath": "$.errorInfo"
              }
            ],
            "next": "waitForProcessing"
          },
          "waitForProcessing": {
            "type": "wait",
            "waitConfig": {
              "seconds": "120"
            },
            "next": "uploadToSystem"
          },
          "uploadToSystem": {
            "type": "executeStep",
            "description": "Upload the extracted data to the system.",
            "retry": [
              {
                "matchErrors": ["Timeout"],
                "interval": 5,
                "maxAttempts": 3,
                "jitter": true,
                "backoffRate": 1.5
              }
            ],
            "catch": [
              {
                "matchErrors": ["*"],
                "next": "handleError",
                "resultPath": "$.errorInfo"
              }
            ],
            "next": "success"
          },
          "handleError": {
            "type": "executeStep",
            "description": "Handle any error that occurred during the workflow, persisting status and error information to the domain-specific database.",
            "inputPath": "$.errorInfo",
            "next": "failureDecision"
          },
          "failureDecision": {
            "type": "decision",
            "description": "Choose the failure state to transition to based on the error type.",
            "inputPath": "$.errorInfo",
            "decisions": [
              {
                "condition": {
                  "function": "eq",
                  "inputs": ["$.error", "DocumentFetchError"]
                },
                "next": "fetchFailure"
              },
              {
                "condition": {
                  "function": "eq",
                  "inputs": ["$.error", "DocumentScanError"]
                },
                "next": "scanFailure"
              },
              {
                "or": [
                  {
                    "function": "eq",
                    "inputs": ["$.error", "ExtractPDFError"]
                  },
                  {
                    "function": "eq",
                    "inputs": ["$.error", "PDFLoadError"]
                  }
                ],
                "next": "processPDFFailure"
              },
              {
                "or": [
                  {
                    "function": "eq",
                    "inputs": ["$.error", "ExtractDOCXError"]
                  },
                  {
                    "function": "eq",
                    "inputs": ["$.error", "DOCXLoadError"]
                  }
                ],
                "next": "processDOCXFailure"
              },
              {
                "condition": {
                  "function": "eq",
                  "inputs": ["$.error", "UploadToSystemError"]
                },
                "next": "uploadToSystemFailure"
              }
            ]
          },
          "success": {
            "type": "success",
            "description": "The video has been successfully processed."
          },
          "fetchFailure": {
            "type": "failure",
            "description": "The document could not be fetched.",
            "failureConfig": {
              "error": "DocumentFetchError",
              "cause": "The document could not be fetched from the provided URL."
            }
          },
          "scanFailure": {
            "type": "failure",
            "description": "An error occurred while scanning the document.",
            "failureConfig": {
              "error": "DocumentScanError",
              "cause": "An error occurred while scanning the document."
            }
          },
          "maliciousContentFound": {
            "type": "failure",
            "description": "Malicious content was found in the document.",
            "failureConfig": {
              "error": "MaliciousContentFound",
              "cause": "Malicious content was found in the document."
            }
          },
          "processPDFFailure": {
            "type": "failure",
            "description": "An error occurred while processing the PDF document.",
            "failureConfig": {
              "error": "PDFProcessingError",
              "cause": "An error occurred while processing the PDF document."
            }
          },
          "processDOCXFailure": {
            "type": "failure",
            "description": "An error occurred while processing the word document.",
            "failureConfig": {
              "error": "DOCXProcessingError",
              "cause": "An error occurred while processing the word document."
            }
          },
          "uploadToSystemFailure": {
            "type": "failure",
            "description": "An error occurred while uploading the extracted data to the system.",
            "failureConfig": {
              "error": "UploadToSystemError",
              "cause": "An error occurred while uploading the extracted data to the system."
            }
          }
        }
      }
    }
  }
}
